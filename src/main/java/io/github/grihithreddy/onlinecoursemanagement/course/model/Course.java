package io.github.grihithreddy.onlinecoursemanagement.course.model;
import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.Objects;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

/**
 * Represents a Course entity in the online course management system.
 * Stores details like title, description, creation date, and course duration.
 */
@Entity
@Table(name = "courses")
public class Course {

    /**
     * Unique identifier for the course. Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    /**
     * Title of the course.
     * Must be between 5 and 50 characters.
     */
    @NotBlank
    @Size(min = 5, max = 50, message = "Title should be between 5-50 characters")
    @Column(nullable = false)
    private String title;

    /**
     * Description of the course.
     * Must be between 10 and 100 characters.
     */
    @NotBlank
    @Size(min = 10, max = 100, message = "description should br between 10-50 characters")
    @Column(nullable = false)
    private String description;

    /**
     * Date when the course was created.
     * Automatically set to the current date during creation.
     */
    @Column(name = "Created_at")
    private LocalDate date;

    /**
     * Duration of the course (e.g., "4 weeks", "3 months").
     */
    @NotBlank(message = "please provide the duration of the course")
    @Column(nullable = false)
    private String duration;

    /**
     * Automatically sets the course creation date to the current date.
     * Invoked before persisting the entity to the database.
     */
    @PrePersist
    protected void onCreate() {
        this.date = LocalDate.now();
    }

    /**
     * Default no-args constructor.
     */
    public Course() {
    }

    /**
     * Parameterized constructor to create a Course object with all fields.
     *
     * @param id          Unique course ID
     * @param title       Title of the course
     * @param description Description of the course
     * @param date        Creation date
     * @param duration    Duration of the course
     */
    public Course(int id, String title, String description, LocalDate date, String duration) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.date = date;
        this.duration = duration;
    }

    /**
     * Returns the course ID.
     *
     * @return course ID
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the course ID.
     *
     * @param id course ID
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the course title.
     *
     * @return course title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the course title.
     *
     * @param title course title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Returns the course description.
     *
     * @return course description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the course description.
     *
     * @param description course description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the course creation date.
     *
     * @return creation date
     */
    public LocalDate getDate() {
        return date;
    }

    /**
     * Sets the course creation date.
     *
     * @param date creation date
     */
    public void setDate(LocalDate date) {
        this.date = date;
    }

    /**
     * Returns the course duration.
     *
     * @return course duration
     */
    public String getDuration() {
        return duration;
    }

    /**
     * Sets the course duration.
     *
     * @param duration course duration
     */
    public void setDuration(String duration) {
        this.duration = duration;
    }

    /**
     * Checks equality based on course fields.
     *
     * @param o Object to compare
     * @return true if all fields match; false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Course course = (Course) o;
        return id == course.id
                && Objects.equals(title, course.title)
                && Objects.equals(description, course.description)
                && Objects.equals(date, course.date)
                && Objects.equals(duration, course.duration);
    }

    /**
     * Generates hash code based on course fields.
     *
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, title, description, date, duration);
    }

    /**
     * Returns a string representation of the Course object.
     *
     * @return string with course details
     */
    @Override
    public String toString() {
        return "Course{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                ", date=" + date +
                ", duration='" + duration + '\'' +
                '}';
    }
}
